<?php

namespace Sidus\SidusBundle\Entity;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Gedmo\Tool\Wrapper\EntityWrapper;
use Doctrine\ORM\Query,
	Gedmo\Tree\Strategy,
	Gedmo\Tree\Strategy\ORM\Nested,
	Gedmo\Exception\InvalidArgumentException,
	Gedmo\Exception\UnexpectedValueException,
	Doctrine\ORM\Proxy\Proxy;

/**
 * NodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NodeRepository extends NestedTreeRepository {

	/**
	 * Get the Tree path query builder by given $node
	 *
	 * @param object $node
	 * @throws InvalidArgumentException - if input is not valid
	 * @return Doctrine\ORM\QueryBuilder
	 */
	public function getPathQueryBuilder($node) {
		$meta = $this->getClassMetadata();
		if (!$node instanceof $meta->name) {
			throw new InvalidArgumentException("Node is not related to this repository");
		}
		$config = $this->listener->getConfiguration($this->_em, $meta->name);
		$wrapped = new EntityWrapper($node, $this->_em);
		if (!$wrapped->hasValidIdentifier()) {
			throw new InvalidArgumentException("Node is not managed by UnitOfWork");
		}
		$left = $wrapped->getPropertyValue($config['left']);
		$right = $wrapped->getPropertyValue($config['right']);
		$qb = $this->_em->createQueryBuilder();
		$qb->select('node')
				->from($config['useObjectClass'], 'node')
				->where($qb->expr()->lte('node.' . $config['left'], $left))
				->andWhere($qb->expr()->gte('node.' . $config['right'], $right))
				->orderBy('node.' . $config['left'], 'ASC')
		;
		if (isset($config['root'])) {
			$rootId = $wrapped->getPropertyValue($config['root']);
			$qb->andWhere($rootId === null ?
							$qb->expr()->isNull('node.' . $config['root']) :
							$qb->expr()->eq('node.' . $config['root'], is_string($rootId) ? $qb->expr()->literal($rootId) : $rootId)
			);
		}
		return $qb;
	}

}
